// Package eresp provides functionality for saving enclave responses.
package eresp

import (
	"crypto/ed25519"
	"encoding/base64"
	"encoding/json"
	"errors"
	"github.com/tonteeton/golib/econf"
	"github.com/tonteeton/golib/esign"
	"github.com/xssnick/tonutils-go/tvm/cell"
	"os"
)

// Config contains configuration parameters for generating an enclave response.
type Config struct {
	Response      econf.ResponseConfig
	SignatureKeys econf.KeysConfig
}

// EnclaveResponse represents the structure of the response generated by the enclave.
type EnclaveResponse struct {
	Signature string `json:"signature"`
	Payload   string `json:"payload"`
	Hash      string `json:"hash"`
}

// SaveResponse signs and saves the enclave response.
func SaveResponse(cfg Config, payload *cell.Cell) error {
	signature, err := esign.GetSignatureKey(cfg.SignatureKeys)
	if err != nil {
		return err
	}
	result, err := newEnclaveResponse(payload, signature.GetPrivateKey())
	if err != nil {
		return err
	}
	return result.save(cfg.Response.ResponsePath)
}

// newEnclaveResponse creates a new signed EnclaveResponse.
func newEnclaveResponse(payload *cell.Cell, key ed25519.PrivateKey) (EnclaveResponse, error) {
	hash := payload.Hash()
	if hash == nil {
		return EnclaveResponse{}, errors.New("failed to compute payload hash")
	}

	var signature []byte
	defer func() {
		if r := recover(); r != nil {
			signature = nil
		}
	}()
	signature = payload.Sign(key)
	if signature == nil {
		return EnclaveResponse{}, errors.New("failed to sign payload hash")
	}

	return EnclaveResponse{
		Signature: base64.StdEncoding.EncodeToString(signature),
		Payload:   base64.StdEncoding.EncodeToString(payload.ToBOC()),
		Hash:      base64.StdEncoding.EncodeToString(hash),
	}, nil
}

// save writes the EnclaveResponse to a file in JSON format.
func (response EnclaveResponse) save(responsePath string) error {
	data, err := json.MarshalIndent(response, "", "  ")
	if err != nil {
		return err
	}
	err = os.WriteFile(responsePath, data, 0600)
	if err != nil {
		return err
	}
	return nil
}
